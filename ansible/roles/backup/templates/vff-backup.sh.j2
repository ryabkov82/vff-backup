#!/usr/bin/env bash
set -euo pipefail
JOB="${1:-}"
[[ -z "$JOB" ]] && { echo "Usage: $(basename "$0") <job-name>"; exit 2; }

# load env
set -a; source "{{ backup_env_file }}"; set +a

TEXTDIRS=({% for d in backup_node_exporter_textfile_dirs %}"{{ d }}"{% if not loop.last %} {% endif %}{% endfor %})
METRIC_FILE="backup_metrics.prom"
start_ts=$(date +%s); status=0; size=0

write_metrics() {
  now=$(date +%s)
  for d in "${TEXTDIRS[@]}"; do
    f="$d/$METRIC_FILE"
    {
      echo "backup_last_run_timestamp_seconds{job=\"${JOB}\"} ${now}"
      echo "backup_last_duration_seconds{job=\"${JOB}\"} $((now-start_ts))"
      echo "backup_last_status{job=\"${JOB}\"} ${status}"
      [[ $size -gt 0 ]] && echo "backup_last_size_bytes{job=\"${JOB}\"} ${size}"
    } > "$f.tmp" && mv "$f.tmp" "$f"
  done
}

trap 'status=1; write_metrics' ERR
trap 'status=0; write_metrics' EXIT

# embed jobs JSON
read -r -d '' JOBS_JSON <<'EOF'
{{ backup_jobs | to_nice_json }}
EOF

jq_job(){ echo "$JOBS_JSON" | jq -r ".[] | select(.name==\"$JOB\") | $1"; }

PATHS=$(jq_job '.paths | @sh')
DUMP_ENABLED=$(jq_job '.db_dump.enabled // false')
DUMP_DIR=$(jq_job '.db_dump.dump_dir // ""')
DUMP_CONTAINER=$(jq_job '.db_dump.container // ""')
DUMP_COMMAND=$(jq_job '.db_dump.command // ""')
PAUSE_CONTAINERS=$(jq_job '.containers // [] | @sh')

# optional dump
if [[ "$DUMP_ENABLED" == "true" && -n "$DUMP_COMMAND" ]]; then
  mkdir -p "$DUMP_DIR" || true
  if [[ -n "$DUMP_CONTAINER" ]]; then
    docker compose ps --format '{{.Name}}' | grep -qx "$DUMP_CONTAINER" || true
    docker compose exec -T "$DUMP_CONTAINER" $DUMP_COMMAND
  else
    bash -lc "$DUMP_COMMAND"
  fi
fi

# pause containers if set
if [[ -n "$PAUSE_CONTAINERS" ]]; then
  eval "set -- $PAUSE_CONTAINERS"
  for c in "$@"; do docker pause "$c" || true; done
fi

# backup
if out=$(restic backup --one-file-system --json --tag "$JOB" $(eval echo $PATHS)); then
  size=$(echo "$out" | jq -r 'select(.message_type=="summary") | .data_bytes')
else
  status=1
fi

# retention
restic forget --json \
  --keep-last {{ backup_forget_policy.keep_last }} \
  --keep-daily {{ backup_forget_policy.keep_daily }} \
  --keep-weekly {{ backup_forget_policy.keep_weekly }} \
  --keep-monthly {{ backup_forget_policy.keep_monthly }} \
  --prune >/dev/null || status=1

# unpause
if [[ -n "$PAUSE_CONTAINERS" ]]; then
  eval "set -- $PAUSE_CONTAINERS"
  for c in "$@"; do docker unpause "$c" || true; done
fi
