server {
    listen 80;
    server_name {{ ctx.server_name }};

    location /.well-known/acme-challenge/ { root /var/www/html; }
    location / { return 301 https://$host$request_uri; }
}

server {
    listen 443 ssl http2;
    server_name {{ ctx.server_name }};

    {% if nginx_cert_method == 'existing' %}
    ssl_certificate     {{ nginx_certs[ctx.name].fullchain }};
    ssl_certificate_key {{ nginx_certs[ctx.name].privkey }};
    {% elif nginx_cert_method == 'selfsigned' %}
    ssl_certificate     /etc/ssl/certs/{{ ctx.name == 's3' and 's3' or 's3-console' }}.fullchain.pem;
    ssl_certificate_key /etc/ssl/private/{{ ctx.name == 's3' and 's3' or 's3-console' }}.privkey.pem;
    {% else %}
    ssl_certificate     /etc/letsencrypt/live/{{ ctx.server_name }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ ctx.server_name }}/privkey.pem;
    {% endif %}

    {% if ctx.is_s3_console and nginx_basic_auth_enabled %}
    auth_basic "MinIO Console";
    auth_basic_user_file /etc/nginx/.htpasswd;
    {% endif %}

    {% if ctx.is_s3_api or ctx.is_s3_console %}
    client_max_body_size 0;
    proxy_request_buffering off;
    proxy_buffering off;
    proxy_http_version 1.1;
    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    {% endif %}

    {% if ctx.allow_list | length > 0 %}
    location / {
        {% for net in ctx.allow_list %}allow {{ net }};{% endfor %}
        deny all;

        proxy_pass http://{{ ctx.backend }};
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;
        {% if ctx.is_s3_console %}
        # WebSocket is required for MinIO Console UI to list objects
        proxy_set_header Upgrade             $http_upgrade;
        proxy_set_header Connection          "upgrade";
        {% endif %}
    }
    {% else %}
    location / {
        proxy_pass http://{{ ctx.backend }};
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;
        {% if ctx.is_s3_console %}
        # WebSocket is required for MinIO Console UI to list objects
        proxy_set_header Upgrade             $http_upgrade;
        proxy_set_header Connection          "upgrade";
        {% endif %}
    }
    {% endif %}
}
